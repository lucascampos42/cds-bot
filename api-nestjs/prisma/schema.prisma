generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId    String  @id @default(cuid())
  userName  String?
  name      String
  email     String  @unique
  cpf       String? @unique
  telefone  String?
  avatarUrl String?
  role      Role    @default(USER)

  // --- Campos de Segurança ---
  password             String?
  lastLogin            DateTime?
  tokenVersion         Int       @default(1)
  refreshToken         String?
  passwordResetToken   String?
  passwordResetExpires DateTime? // Adicionado para "esqueci AuthRequest.ts senha"
  activationToken      String?   // Token para ativação da conta
  activationTokenExpires DateTime? // Expiração do token de ativação

  // --- Campos de Controle ---
  active           Boolean   @default(false)
  blocked          Boolean   @default(false)
  blockedUntil     DateTime?
  loginAttempts    Int       @default(0)
  lastFailedLogin  DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?

  logs      Log[]
  auditLogs AuditLog[]

  @@map("users")
}

enum Role {
  USER
  CLIENT
  ADMIN
}

model Log {
  logId     Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  route     String
  method    String
  userId    String?
  details   Json?

  user User? @relation(fields: [userId], references: [userId])

  @@map("logs")
}

model AuditLog {
  auditId       String      @id @default(cuid())
  entityType    String      // Tipo da entidade (User, Log, etc.)
  entityId      String      // ID da entidade afetada
  action        AuditAction // Ação realizada (CREATE, UPDATE, DELETE)
  userId        String?     // Usuário que realizou a ação
  timestamp     DateTime    @default(now())
  oldValues     Json?       // Valores anteriores (para UPDATE e DELETE)
  newValues     Json?       // Novos valores (para CREATE e UPDATE)
  changedFields String[]    // Campos que foram alterados
  ip            String?     // IP do usuário
  userAgent     String?     // User agent do navegador
  metadata      Json?       // Metadados adicionais

  user User? @relation(fields: [userId], references: [userId])

  @@index([entityType, entityId])
  @@index([userId])
  @@index([timestamp])
  @@map("audit_logs")
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  PASSWORD_RESET
  ACCOUNT_BLOCKED
  ACCOUNT_UNBLOCKED
}
